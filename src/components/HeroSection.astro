---
// src/components/HeroSection.astro
interface Props {
  lang: 'ko' | 'en' | 'zh' | 'ja';
}

const { lang = 'ko' } = Astro.props;

// 다국어 텍스트
const texts = {
  ko: {
    title: "당신의 새로운 경험, SERA",
    subtitle: "실시간 영상과 연동되는 META TOY로 몰입감 있는 경험 제공",
    cta: "더 알아보기"
  },
  en: {
    title: "Your New Experience, SERA",
    subtitle: "Immersive experiences with META TOY synchronized with real-time video",
    cta: "Learn More"
  },
  zh: {
    title: "您的全新体验，SERA",
    subtitle: "通过与实时视频同步的META TOY提供沉浸式体验",
    cta: "了解更多"
  },
  ja: {
    title: "あなたの新しい体験、SERA",
    subtitle: "リアルタイム映像と連動するMETA TOYで没入感のある体験を提供",
    cta: "詳しく見る"
  }
};
---

<section class="hero">
  <div class="container">
    <div class="hero-content">
      <h1 class="fade-in">
        {texts[lang].title}
      </h1>
      <p class="fade-in delay-200">
        {texts[lang].subtitle}
      </p>
      <div class="cta-buttons fade-in delay-300">
        <a href="#service" class="btn btn-primary">
          {texts[lang].cta}
        </a>
      </div>
    </div>
    <div class="hero-image fade-in delay-200">
      <div class="hero-device">
        <!-- 디바이스 이미지가 들어갈 공간 -->
        <div class="device-glow"></div>
      </div>
    </div>
  </div>
  <div class="hero-background">
    <div class="gradient-overlay"></div>
    <div class="particle-container" id="particles-js"></div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    width: 100%;
    min-height: 100vh;
    display: flex;
    align-items: center;
    overflow: hidden;
    padding-top: 5rem;
  }
  
  .hero-content {
    width: 55%;
    position: relative;
    z-index: 10;
  }
  
  .hero h1 {
    font-size: 4.5rem;
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: 1.5rem;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
  }
  
  .hero p {
    font-size: 1.4rem;
    margin-bottom: 2.5rem;
    opacity: 0.9;
    max-width: 600px;
  }
  
  .cta-buttons {
    display: flex;
    gap: 1rem;
  }
  
  .hero-image {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 45%;
    height: 80%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 5;
  }
  
  .hero-device {
    width: 100%;
    height: 100%;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="10" y="10" width="80" height="80" rx="10" fill="%23333" /></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    position: relative;
  }
  
  .device-glow {
    position: absolute;
    width: 120%;
    height: 120%;
    left: -10%;
    top: -10%;
    background: radial-gradient(circle, rgba(255, 62, 157, 0.4) 0%, rgba(157, 0, 255, 0.2) 40%, rgba(0, 0, 0, 0) 70%);
    filter: blur(30px);
    opacity: 0.8;
    animation: pulse 3s ease-in-out infinite alternate;
  }
  
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
  
  .gradient-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at 70% 50%, rgba(157, 0, 255, 0.15) 0%, rgba(18, 18, 18, 0.7) 70%);
    z-index: 2;
  }
  
  .particle-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
  
  @keyframes pulse {
    0% {
      opacity: 0.5;
      transform: scale(1);
    }
    100% {
      opacity: 0.8;
      transform: scale(1.1);
    }
  }
  
  /* 반응형 스타일 */
  @media (max-width: 1200px) {
    .hero h1 {
      font-size: 3.5rem;
    }
    
    .hero p {
      font-size: 1.2rem;
    }
  }
  
  @media (max-width: 992px) {
    .hero-content {
      width: 100%;
      text-align: center;
      padding: 0 1rem;
    }
    
    .hero p {
      margin: 0 auto 2rem;
    }
    
    .cta-buttons {
      justify-content: center;
    }
    
    .hero-image {
      position: relative;
      width: 100%;
      height: 400px;
      transform: none;
      top: auto;
      margin-top: 3rem;
    }
  }
  
  @media (max-width: 768px) {
    .hero {
      min-height: auto;
      padding: 8rem 0 5rem;
    }
    
    .hero h1 {
      font-size: 3rem;
    }
    
    .hero p {
      font-size: 1.1rem;
    }
    
    .hero-image {
      height: 300px;
    }
  }
  
  @media (max-width: 480px) {
    .hero h1 {
      font-size: 2.5rem;
    }
    
    .hero-image {
      height: 250px;
    }
  }
</style>

<script>
  // 직접 구현한 파티클 효과
  document.addEventListener('DOMContentLoaded', function() {
    const particleContainer = document.getElementById('particles-js');
    if (!particleContainer) return;
    
    // 기존 내용 지우기
    particleContainer.innerHTML = '';
    particleContainer.style.position = 'absolute';
    particleContainer.style.top = '0';
    particleContainer.style.left = '0';
    particleContainer.style.width = '100%';
    particleContainer.style.height = '100%';
    particleContainer.style.overflow = 'hidden';
    
    // 캔버스 생성
    const canvas = document.createElement('canvas');
    canvas.width = particleContainer.offsetWidth;
    canvas.height = particleContainer.offsetHeight;
    canvas.style.display = 'block';
    particleContainer.appendChild(canvas);
    
    const ctx = canvas.getContext('2d');
    
    // 파티클 설정
    const particlesArray = [];
    const numberOfParticles = 100;
    const colors = ['#ff3e9d', '#9d00ff', '#ff3e9d50', '#9d00ff50'];
    
    // 캔버스 크기 조정 함수
    function resizeCanvas() {
      canvas.width = particleContainer.offsetWidth;
      canvas.height = particleContainer.offsetHeight;
      
      // 파티클 재생성
      particlesArray.length = 0;
      init();
    }
    
    // 파티클 클래스
    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 3 + 1;
        this.color = colors[Math.floor(Math.random() * colors.length)];
        this.speedX = Math.random() * 0.5 - 0.25;
        this.speedY = Math.random() * 0.5 - 0.25;
        this.linkedWith = [];
      }
      
      // 움직임 업데이트
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        
        // 화면 경계에서 반대로 이동
        if (this.x > canvas.width || this.x < 0) {
          this.speedX = -this.speedX;
        }
        
        if (this.y > canvas.height || this.y < 0) {
          this.speedY = -this.speedY;
        }
      }
      
      // 파티클 그리기
      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }
      
      // 다른 파티클과의 연결선 그리기
      drawLinks() {
        this.linkedWith = [];
        
        for (let i = 0; i < particlesArray.length; i++) {
          const dx = this.x - particlesArray[i].x;
          const dy = this.y - particlesArray[i].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 100) {
            this.linkedWith.push(i);
            
            ctx.beginPath();
            ctx.moveTo(this.x, this.y);
            ctx.lineTo(particlesArray[i].x, particlesArray[i].y);
            ctx.strokeStyle = `rgba(157, 0, 255, ${0.2 * (1 - distance / 100)})`;
            ctx.lineWidth = 0.5;
            ctx.stroke();
          }
        }
      }
    }
    
    // 파티클 초기화
    function init() {
      for (let i = 0; i < numberOfParticles; i++) {
        particlesArray.push(new Particle());
      }
    }
    
    // 애니메이션
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      for (let i = 0; i < particlesArray.length; i++) {
        particlesArray[i].update();
        particlesArray[i].draw();
      }
      
      for (let i = 0; i < particlesArray.length; i++) {
        particlesArray[i].drawLinks();
      }
      
      requestAnimationFrame(animate);
    }
    
    // 마우스 상호작용
    let mouse = {
      x: undefined,
      y: undefined,
      radius: 100
    };
    
    canvas.addEventListener('mousemove', function(event) {
      const rect = canvas.getBoundingClientRect();
      mouse.x = event.clientX - rect.left;
      mouse.y = event.clientY - rect.top;
    });
    
    canvas.addEventListener('mouseout', function() {
      mouse.x = undefined;
      mouse.y = undefined;
    });
    
    // 창 크기 변경 시 캔버스 조정
    window.addEventListener('resize', resizeCanvas);
    
    // 초기화 및 애니메이션 시작
    init();
    animate();
  });
</script>
